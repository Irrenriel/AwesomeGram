{{ header -}}
import asyncio
import datetime
import os
from pathlib import Path

from alembic.config import Config
from alembic import command
from aiogram import Bot, Dispatcher
from loguru import logger

from modules.config import config
from modules.installing import startup_installing
from resources.base import LocalesManager


# Main variables:
path = Path(__file__).parent
bot = Bot(token=config.BOT_TOKEN, parse_mode=config.PARSE_MODE)
dp = Dispatcher()


async def startup_func(dispatcher: Dispatcher):
    logger.info('= = = Bot has been launched! = = =')
    logger.info(f'Current App version: {config.APP_VERSION}')

    # Migrations:
    # run_alembic()

    logger.info('= = = = = = = = =')

    # Installing LocaleManager:
    LocalesManager.default_locale = 'RU'
    LocalesManager.init(path)

    # Installing Handlers & Middlewares:
    await startup_installing(dispatcher, LocalesManager)

    logger.info('= = = Bot is ready to work! = = =')


def run_alembic():
    try:
        alembic_cfg = Config("alembic.ini")

        # Create migrations if changes exists
        command.revision(alembic_cfg, autogenerate=True)

        # Accept migrations
        command.upgrade(alembic_cfg, "head")

    except ValueError:
        pass


def create_directories(path: Path):
    if not os.path.exists(path / "logs"):
        os.mkdir(path / "logs")


def create_loggers():
    dt = datetime.datetime.now().strftime("%Y_%m_%d_%H_%M_%S")

    # Logger:
    logger.add(f"logs\\stream_{dt}.log", level="INFO", backtrace=True, diagnose=True)
    logger.add(f"logs\\errors_{dt}.log", level="ERROR", backtrace=True, diagnose=True)


async def main():
    # Startup func:
    dp.startup.register(startup_func)

    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        # Directories:
        create_directories(path)

        # Loggers:
        create_loggers()

        asyncio.run(main())

    except (KeyboardInterrupt, SystemExit):
        pass

    except Exception as e:
        logger.error(f'Exception happend: {e}', exc_info=True)

    finally:
        logger.info('= = = Bot has been disabled! = = =')