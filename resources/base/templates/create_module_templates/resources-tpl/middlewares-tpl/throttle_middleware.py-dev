{{ header -}}
from datetime import datetime, timedelta
from threading import RLock
from typing import Union

from aiogram.dispatcher.handler import CancelHandler
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.types import Message


class ThrottleMiddleware(BaseMiddleware):
    """ Make a throttling """
    def __init__(self, seconds: int = 1):
        self.cache = AiogramTTLCache(seconds=seconds)
        super(ThrottleMiddleware, self).__init__()

    async def on_process_message(self, message: Message, data: dict):
        if not self.cache.get(message=message):
            self.cache.set(message=message)
            return

        # cache.set(message, seconds=int(cache.left(message).total_seconds() * 2))
        # await message.answer(f"flood control wait {self.cache.left(message=message)} sec.")
        raise CancelHandler


class AiogramTTLCache:
    _rlock = RLock()

    def __init__(self, **ttl):
        self.ttl = ttl
        self.cache = {}
        self.default = datetime(2000, 1, 1)

    def get(self, *, message: Message = None, chat: Union[str, int] = None, user: Union[str, int] = None):
        with AiogramTTLCache._rlock:
            if message is not None:
                chat, user = message.chat.id, message.from_user.id

            chat, user = self.check_input(chat=chat, user=user)
            ttl = self.cache.get(chat, {}).get(user, self.default)

            if datetime.now() < ttl:
                return True

            self.cache.get(chat, {}).pop(user, None)
            return False

    def set(self, *, message: Message = None, chat: Union[str, int] = None, user: Union[str, int] = None, **ttl):
        with AiogramTTLCache._rlock:
            if message is not None:
                chat, user = message.chat.id, message.from_user.id

            chat, user = self.check_input(chat=chat, user=user)
            delta_ttl = ttl or self.ttl

            if not delta_ttl:
                raise Exception("where ttl?????")

            time = datetime.now() + timedelta(**delta_ttl)
            self.cache.setdefault(chat, {}).setdefault(user, time)

    def left(self, *, message: Message = None, chat: Union[str, int] = None, user: Union[str, int] = None) -> timedelta:
        with AiogramTTLCache._rlock:
            if message is not None:
                chat, user = message.chat.id, message.from_user.id

            chat, user = self.check_input(chat=chat, user=user)

            if self.get(chat=chat, user=user):
                return self.cache.get(chat).get(user) - datetime.now()

            return timedelta()

    @staticmethod
    def check_input(chat: Union[str, int], user: Union[str, int]):
        if chat is None and user is None:
            raise ValueError('`user` or `chat` parameter is required but no one is provided!')

        if user is None and chat is not None:
            user = chat

        elif user is not None and chat is None:
            chat = user

        return str(chat), str(user)
