{{ header -}}
from typing import Callable, Awaitable, Dict, Any, Union

from aiogram import types, BaseMiddleware
from loguru import logger

from resources.base import LocalesManager


class MainMiddleware(BaseMiddleware):
    _PATTERN = '[New Update] > Update Type: {update} > From ID: {id} > Content: {content}'

    async def __call__(
            self,
            handler: Callable[[types.Message, Dict[str, Any]], Awaitable[Any]],
            event: Union[types.Message, types.CallbackQuery, types.InlineQuery],
            data: Dict[str, Any]
    ) -> Any:
        logger.info(
            self._PATTERN.format(
                update=event.__class__.__name__,
                id=str(event.from_user.id),
                content=self._get_content(event)
            )
        )

        # Data:
        data['locales_manager'] = LocalesManager
        data['locale'] = LocalesManager.get

        return await handler(event, data)

    @staticmethod
    def _get_content(event: Union[types.Message, types.CallbackQuery, types.InlineQuery]) -> str:
        if isinstance(event, types.Message):
            return event.text or str(event)

        elif isinstance(event, types.CallbackQuery):
            return event.data

        elif isinstance(event, types.InlineQuery):
            return event.query

        else:
            return "Undefined"
