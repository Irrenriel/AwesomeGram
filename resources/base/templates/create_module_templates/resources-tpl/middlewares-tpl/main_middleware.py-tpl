{{ header -}}
import asyncio
from typing import Callable, Awaitable, Dict, Any, Union

from aiogram import types, BaseMiddleware
from aiogram.dispatcher.event.bases import CancelHandler
from loguru import logger

from resources.base import LocalesManager


class MainMiddleware(BaseMiddleware):
    _PATTERN = '[New Update] > Update Type: {update} > From ID: {id} > Content: {content}'

    album_data: dict = {}
    latency = 0.5

    async def __call__(
            self,
            handler: Callable[[types.Message, Dict[str, Any]], Awaitable[Any]],
            event: Union[types.Message, types.CallbackQuery, types.InlineQuery],
            data: Dict[str, Any]
    ) -> Any:
        logger.info(
            self._PATTERN.format(
                update=event.__class__.__name__,
                id=str(event.from_user.id),
                content=self._get_content(event)
            )
        )

        # Data:
        data['locale'] = LocalesManager.get
        data['locales_manager'] = LocalesManager
        data['text'] = LocalesManager.text
        data['button'] = LocalesManager.button
        data['album'] = []

        if hasattr(event, 'media_group_id') and event.media_group_id:
            try:
                self.album_data[event.media_group_id].append(event)
                return

            except KeyError:
                self.album_data[event.media_group_id] = [event]
                await asyncio.sleep(self.latency)

                data['_is_last'] = True
                data["album"] = self.album_data[event.media_group_id]

        elif hasattr(event, 'photo'):
            data["album"] = [event]

        # with Session() as session:
        #     data['session'] = session
        #
        #     user = session.get(UserModel, {"uid": event.from_user.id})
        #
        #     if user and user.is_banned:
        #         raise CancelHandler()
        #
        #     data['user'] = user
        #
        #     await handler(event, data)

        await handler(event, data)

        if hasattr(event, 'media_group_id') and event.media_group_id and data.get("_is_last"):
            del self.album_data[event.media_group_id]
            del data['_is_last']

        return await handler(event, data)

    @staticmethod
    def _get_content(event: Union[types.Message, types.CallbackQuery, types.InlineQuery]) -> str:
        if isinstance(event, types.Message):
            return event.text or str(event)

        elif isinstance(event, types.CallbackQuery):
            return event.data

        elif isinstance(event, types.InlineQuery):
            return event.query

        else:
            return "Undefined"
